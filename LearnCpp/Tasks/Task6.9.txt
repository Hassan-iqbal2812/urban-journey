[NOTES] : In some applications, certain symbolic constants may need to be used throughout
your code (not just in one location). These can include physics or
mathematical constants that don’t change (e.g. pi or Avogadro’s number), or
application-specific “tuning” values (e.g. friction or gravity coefficients).
Instead of redefining these constants in every file that needs them (a
violation of the “Don’t Repeat Yourself” rule), it’s better to declare them
once in a central location and use them wherever needed. That way, if you ever
need to change them, you only need to change them in one place, and those
changes can be propagated out.

Global constants as inline variables C++17

C++17 introduced a new concept called inline variables. In C++, the term
inline has evolved to mean “multiple definitions are allowed”. Thus, an inline
variable is one that is allowed to be defined in multiple files without
violating the one definition rule. Inline global variables have external
linkage by default.

The linker will consolidate all inline definitions of a variable into a single
variable definition (thus meeting the one definition rule). This allows us to
define variables in a header file and have them treated as if there was only
one definition in a .cpp file somewhere. Let’s say you have a normal constant
that you’re #including into 10 code files. Without inline, you get 10
definitions. With inline, the compiler picks 1 definition to be the canonical
definition, so you only get 1 definition. This means you save 9 constants
worth of memory.

These variables will also retain their constexpr-ness in all files in which
they are included, so they can be used anywhere a constexpr value is required.
Constexpr values can also be more highly optimized by the compiler than
runtime-const (or non-const) variables.

Inline variables have two primary restrictions that must be obeyed:

All definitions of the inline variable must be identical (otherwise, undefined
behavior will result).
The inline variable definition (not a forward declaration) must be present in
any file that uses the variable.
With this, we can go back to defining our globals in a header file without the
downside of duplicated variables:

[TASK] : To be able to share global constant from the constants.h -> main.cpp

[COMPLETED] : TRUE